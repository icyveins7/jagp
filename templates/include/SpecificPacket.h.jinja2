// This file has been automatically generated by jagp.

#pragma once

#include <stdint.h>
#include <iostream>
#include <vector>
#include <memory>

#include "Packet.h"
{% for component in packet.components %}
#include "{{component.type}}.h"
{% endfor %}


class {{ packet.name }} : public Packet
{
public:

    {% for component in packet.components %}
    {{ component.type }} get_{{ component.name }}() const { return m_{{ component.name }}; };
    void set_{{ component.name }}(const {{ component.type }}& value) { m_{{ component.name }} = value; };

    {% endfor %}

    virtual void write(uint8_t *buf, size_t buflen) override
    {
        {% for component in packet.components %}
        if (buflen < m_{{component.name}}.size())
            throw std::out_of_range(
                "{{ packet.name }}: Buffer too small, failed to write {{ component.name }}"
            );
        m_{{component.name}}.write(buf, buflen);
        buflen -= m_{{component.name}}.size();

        {% endfor %}
    }

    virtual void read(const uint8_t *buf, size_t buflen) override
    {
        {% for component in packet.components %}
        if (buflen < m_{{component.name}}.size())
            throw std::out_of_range(
                "{{ packet.name }}: Buffer too small, failed to read {{ component.name }}"
            );
        m_{{component.name}}.read(buf, buflen);
        buflen -= m_{{component.name}}.size();

        {% endfor %}
    }
    
private:
    {% for component in packet.components %}
    {{ component.type }} m_{{ component.name }};
    {% endfor %}
};
