{# Define macro here for now; to move out and import eventually #}
{% macro contiguousBitmask(len, start, end) -%}
0b{% for i in range(len) %}{% if i >= start and i < end %}1{% else %}0{% endif %}{% endfor %}
{%- endmacro %}

{# Performs left or right shift for negative/positive values; 0 values are ignored #}
{% macro lrshift(shift) -%}
{% if shift > 0 %} >> {{ shift }}{% elif shift < 0 %} << {{ -shift }}{% endif %}
{%- endmacro %}

{# Adds a single initializer to the initializer list #}
{% macro addInitializer(fieldname, fieldvalue, prepend_comma) -%}
{% if prepend_comma %}, {%endif%}m_{{fieldname}}({{fieldvalue}})
{%- endmacro %}

{# Used to prepend const keyword to member variable declarations #}
{% macro prependConstIfFixed(field) -%}
{% if field.fixed is defined %}const {% endif %}
{%- endmacro %}


{% macro getIndexedSketchSymbol(index, orderedSymbolList) -%}
{{orderedSymbolList[index]}}
{%- endmacro %}

{# Used to sketch a block of comments showing the layout of bits to fields before class declaration #}
{% macro sketchFields(component, orderedSymbolList) -%}
{% set ns = namespace(fieldIdx=0) %}
/*
Layout
|7|6|5|4|3|2|1|0|
-----------------
{% for byte in range(component.numBytes) %}
|{% for bit in range(8) -%}
{% set i = byte * 8 + bit %}
{% set start = component.fields[ns.fieldIdx].byte_offset * 8 + component.fields[ns.fieldIdx].bit_offset %}
{% set end = start + component.fields[ns.fieldIdx].size %}
{% if i >= start and i < end -%}{# Then print a symbol #}
{{getIndexedSketchSymbol(ns.fieldIdx, orderedSymbolList)}}
{%- endif -%}
|
{%- if i == end-1 -%}{# Move to next field after printing the last one#}
{% set ns.fieldIdx = ns.fieldIdx + 1%}
{%- endif -%}
{%- endfor %}{# End bit loop #}

{% endfor %}{# End byte loop #}
*/

{%- endmacro %}

